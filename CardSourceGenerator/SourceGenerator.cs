using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace CardSourceGenerator
{
    [Generator]
    internal class SourceGenerator : ISourceGenerator
    {
        private const string YGOCards = nameof(YGOCards);
        private const string YGOCardName = nameof(YGOCardName);
        private const string YGOCard = nameof(YGOCard);

        private static string GetIdentifier(string name)
        {
            var identifier = new StringBuilder();
            identifier.Append("C_");

            foreach (var chr in name)
            {
                if (char.IsLetterOrDigit(chr))
                {
                    identifier.Append(chr);
                }
            }

            return identifier.ToString();
        }

        private static string GetName(string name)
        {
            var cardName = new StringBuilder();

            foreach (var chr in name)
            {
                if (chr == '"')
                {
                    cardName.Append('\\');
                    cardName.Append('"');
                }
                else if (chr == '\\')
                {
                    cardName.Append(@"\\");
                }
                else
                {
                    cardName.Append(chr);
                }
            }

            return cardName.ToString();
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var cards = new HashSet<IYGOCard>();
            var filesRead = new List<string>();
            foreach (var file in context.AdditionalFiles.Where(text => text.Path.EndsWith(".json")))
            {
                if (file.GetText() is SourceText text)
                {
                    filesRead.Add(file.Path);
                    cards.UnionWith(YGOProData.GetCardData(text.ToString()));
                }
            }

            CreateRawNamesSourceCode(context, cards);
            CreateMappedNamesSourceCode(context, cards);
            CreatePathsSourceCode(context, filesRead);
        }

        private static void CreatePathsSourceCode(GeneratorExecutionContext context, IEnumerable<string> paths)
        {
            var sb = new StringBuilder();

            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}
#nullable enable
using System.Text.Json;

namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        public interface IYGOCard
        {{
            {YGOCards}.{YGOCardName} Name {{ get; }}
            int? Level {{ get; }}
            int? AttackPoints {{ get; }}
            int? DefensePoints {{ get; }}
            string? MonsterType {{ get; }}
            string? MonsterAttribute {{ get; }}
        }}

        private sealed class YGOProCard : IYGOCard
        {{
            public {YGOCards}.{YGOCardName} Name {{ get; }}
            public int? Level {{ get; }}
            public int? AttackPoints {{ get; }}
            public int? DefensePoints {{ get; }}
            public string? MonsterType {{ get; }}
            public string? MonsterAttribute {{ get; }}

            public YGOProCard(JsonElement element)
            {{
                {{
                    if (!element.TryGetProperty(""name"", out var el))
                    {{
                        throw new Exception(""name not found"");
                    }}

                    var name = el.GetString() ?? throw new Exception(""name not a string"");

                    if(!{YGOCards}.CardNameMap.TryGetValue(name, out var cardName))
                    {{
                        throw new Exception(""{YGOCardName} not found"");
                    }}

                    Name = cardName;
                }}

                {{
                    if (element.TryGetProperty(""level"", out var el))
                    {{
                        Level = el.GetInt32();
                    }}
                }}

                {{
                    if (element.TryGetProperty(""atk"", out var el))
                    {{
                        AttackPoints = el.GetInt32();
                    }}
                }}

                {{
                    if (element.TryGetProperty(""def"", out var el))
                    {{
                        DefensePoints = el.GetInt32();
                    }}

                }}

                {{
                    if (element.TryGetProperty(""race"", out var el))
                    {{
                        MonsterType = el.GetString() ?? throw new Exception(""type not a string"");
                    }}
                }}

                {{
                    if (element.TryGetProperty(""attribute"", out var el))
                    {{
                        MonsterAttribute = el.GetString() ?? throw new Exception(""attribute not a string"");
                    }}
                }}
            }}
        }}

        private sealed class YGOProData
        {{
            public IReadOnlyList<IYGOCard> Data {{ get; }} = Array.Empty<IYGOCard>();

            public YGOProData(JsonElement element)
            {{
                var list = new List<IYGOCard>();
                Data = list;

                if (!element.TryGetProperty(""data"", out var el))
                {{
                    throw new Exception(""data not found"");
                }}

                foreach (var obj in el.EnumerateArray())
                {{
                    list.Add(new YGOProCard(obj));
                }}
            }}
        }}

        public static IReadOnlyList<IYGOCard> LoadCardDataFromYgoPro(string path)
        {{
            using var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);
            using var document = JsonDocument.Parse(stream);
            return new YGOProData(document.RootElement).Data;
        }}

        public static IReadOnlyList<string> Paths {{ get; }} = new List<string>()
        {{");

            foreach (var p in paths)
            {
                sb.Append($@"
            @""{Path.GetFullPath(p)}"",");
            }

            sb.Append($@"
        }};
    }}
}}");

            context.AddSource($"{YGOCards}.Paths.g.cs", sb.ToString());
        }

        private static void CreateMappedNamesSourceCode(GeneratorExecutionContext context, IReadOnlyCollection<IYGOCard> cards)
        {
            var sb = new StringBuilder();
            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}
namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        public static IReadOnlyDictionary<string, {YGOCards}.{YGOCardName}> CardNameMap {{ get; }} = new Dictionary<string, {YGOCards}.{YGOCardName}>
        {{");

            foreach (var card in cards)
            {
                sb.Append($@"
            {{ ""{GetName(card.Name)}"", new {YGOCards}.{YGOCardName}(""{GetName(card.Name)}"") }},");
            }

            sb.Append($@"
        }};
    }}
}}");
            context.AddSource($"{YGOCards}.MappedNames.g.cs", sb.ToString());
        }

        private static void CreateRawNamesSourceCode(GeneratorExecutionContext context, IReadOnlyCollection<IYGOCard> cards)
        {
            var sb = new StringBuilder();
            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}
using System.Diagnostics;
namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        [DebuggerDisplay(""{{Name}}"")]
        public readonly struct {YGOCardName} : IEquatable<{YGOCardName}>, IComparable<{YGOCardName}>
        {{
            public string Name {{ get; }} = string.Empty;

            public {YGOCardName}(string name)
            {{
                Name = name;
            }}

            public bool Equals({YGOCardName} other) => Name.Equals(other.Name, StringComparison.Ordinal);
            public override bool Equals(object obj) => obj is {YGOCardName} other && Equals(other);
            public override int GetHashCode() => StringComparer.Ordinal.GetHashCode(Name);
            public static bool operator ==({YGOCardName} x, {YGOCardName} y) => x.Equals(y);
            public static bool operator !=({YGOCardName} x, {YGOCardName} y) => !(x == y);

            public int CompareTo({YGOCardName} other) => StringComparer.Ordinal.Compare(Name, other.Name);
            public static bool operator >({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) > 0;
            public static bool operator <({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) < 0;
            public static bool operator >=({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) >= 0;
            public static bool operator <=({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) <= 0;
        }}");

            foreach (var card in cards)
            {
                var identifier = GetIdentifier(card.Name);
                var name = GetName(card.Name);

                sb.Append($@"
        public static {YGOCardName} {identifier} {{ get; }} = new {YGOCardName}(""{name}"");");
            }

            sb.Append($@"
    }}
}}");
            context.AddSource($"{YGOCards}.Names.g.cs", sb.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {

        }
    }
}
